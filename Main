package com.naturalspawn.bluenatural;

import org.bukkit.Bukkit;
import org.bukkit.Color;
import org.bukkit.Effect;
import org.bukkit.FireworkEffect;
import org.bukkit.FireworkEffect.Type;
import org.bukkit.Location;
import org.bukkit.Server;
import org.bukkit.Sound;
import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.entity.Firework;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.event.player.PlayerRespawnEvent;
import org.bukkit.inventory.meta.FireworkMeta;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.java.JavaPlugin;

import net.md_5.bungee.api.ChatColor;

public class Main extends JavaPlugin implements Listener {
	public static Plugin plugin;
	public static Server server;
	public static String pluginName;
	public static String pluginVersion;
	String cslprefix = "[NaturalRespawn] ";
	
	@Override
    public void onLoad()
    {
	    plugin = this;
        server = plugin.getServer();
        NLog.setPluginLogger(plugin.getLogger());
        NLog.setPluginLogger(plugin.getLogger());
        pluginName = plugin.getDescription().getName();
        pluginVersion = plugin.getDescription().getVersion();
        this.saveDefaultConfig();
    }
	public void loadingConfiguration(){
		String prefix = "prefix";
		plugin.getConfig().addDefault(prefix, "&7&l[&aNatural&eSpawn&7&l]");
		
		String cooldownteleport = "cooldown-teleport";
		plugin.getConfig().addDefault(cooldownteleport, Integer.valueOf(2));
		
		String notsetspawn = "not-set-spawn";
		plugin.getConfig().addDefault(notsetspawn, "&4Không có tọa độ để set spawn,dùng lệnh /back !!");
		
		String newplayer = "new-player";
		plugin.getConfig().addDefault(newplayer, "&a%player là người chơi mới,hãy chào đón người ấy !");
		
		String particlespawn = "particle-spawn";
		plugin.getConfig().addDefault(particlespawn, "ENDER_SIGNAL");
		
		String joinmessage = "joining-message";
		plugin.getConfig().addDefault(joinmessage, "&a%p đã tham gia Server");
		String quitmessage = "quiting-message";
		plugin.getConfig().addDefault(quitmessage, "&c%p đã thoát khỏi Server");
		
		String joiningsound = "joining-sound";
		plugin.getConfig().addDefault(joiningsound, "ENTITY_EXPERIENCE_ORB_PICKUP​");
		String quitingsound = "quiting-sound";
		plugin.getConfig().addDefault(quitingsound, "BLOCK_CHEST_CLOSE");
		String newplayersound = "new-player-sound";
		plugin.getConfig().addDefault(newplayersound, "ENTITY_PLAYER_LEVELUP");
		
		String setspawn = "set-spawn";
		plugin.getConfig().addDefault(setspawn, "&aSet spawn complete !");
		
		String reload = "reload";
		plugin.getConfig().addDefault(reload, "&aReload Successfully !");
		
		String noperm = "no-perm";
		plugin.getConfig().addDefault(noperm, "&cYou do not have permission to do that ! Do not do this again !");
		
		getConfig().options().copyDefaults(true);
		saveDefaultConfig();
			
	}
	PluginDescriptionFile pdf = getDescription();
	
	@Override
	public void onEnable(){
		ConsoleCommandSender console = getServer().getConsoleSender();
		console.sendMessage(this.cslprefix + ChatColor.BLUE + "The plugin will start in a few seconds");
		loadingConfiguration();
		getServer().getPluginManager().registerEvents(this, this);
		console.sendMessage(this.cslprefix + ChatColor.RED + "The plugin started");
		console.sendMessage(this.cslprefix + ChatColor.YELLOW + pdf.getName() + pdf.getVersion());
		
	}
	@Override
	public void onDisable(){
		
	}
	public boolean onCommand(CommandSender sender, Command cmd, String commandLabel, String[] args) {
		ConsoleCommandSender console = Bukkit.getConsoleSender();
		if (!(sender instanceof Player)) {
			console.sendMessage(this.cslprefix + ChatColor.RED + "This command only use in game");				
			}else{
				Player p = (Player) sender;
				Location loc = p.getLocation();
				if(cmd.getName().equalsIgnoreCase("naturalspawn")){
					if(args.length < 1){
					if(p.hasPermission("naturalspawn.help")){
						p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&7&m---------------&7&l[&aNatural&eSpawn&7&l]&7&m---------------"));
						p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/naturalspawn &7- Xem lệnh NaturalSpawn"));
						p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/naturalspawn setspawn &7- Set khu để spawn"));
					    p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/spawn &7- dịch chuyển chỗ spawn"));
					    p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/naturalspawn reload &7- reload plugin"));
					    p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&bPlugin made by &eBlueNatural"));
					    p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&7&m---------------&7&l[&aNatural&eSpawn&7&l]&7&m---------------"));
					    return true;				
						}else{
							p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
									ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("no-perm")));
							return true;
						}
								
			}else if(args.length == 1 && args[0].equalsIgnoreCase("setspawn")){
				if(p.hasPermission("naturalspawn.setspawn")){
					Location location = p.getLocation();
					saveLocation(location);
					p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
							ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("set-spawn")));
					return true;
				}else{
					p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
							ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("no-perm")));
					return true;
			
				}
			}else if(args.length == 1 && args[0].equalsIgnoreCase("reload")){
				if(p.hasPermission("naturalspawn.reload")){
					ReloadConfig();
					p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
							ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("")));
					
				}
			}
				}else if(cmd.getName().equalsIgnoreCase("spawn")){
					if(p.hasPermission("naturalspawn.spawn")){
						if(p.isOnline()){
						Integer cooldown = plugin.getConfig().getInt("cooldown-teleport");
						p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
								ChatColor.translateAlternateColorCodes('&', "&eVui lòng đợi trong" + cooldown + "&agiây"));
						Bukkit.getServer().getScheduler().runTaskLater(this, new Runnable(){
							public void run(){
								teleportPlayer(p);
								p.playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-spawn")), 4.0F);								
				}
						}, 20L * cooldown);
						return true;
					}
					}else{
						p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
								ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("no-perm")));
						return true;	
					}
				
	}
			}
		return true;
	}
			
	
	@SuppressWarnings("deprecation")
	@EventHandler
	public void onJoin(PlayerJoinEvent e){
		Player p = e.getPlayer();
		Location loc = p.getLocation();
		if(!p.hasPlayedBefore()){
		Firework f = (Firework) p.getWorld().spawn(loc, Firework.class);
		FireworkMeta fm = f.getFireworkMeta();
		fm.addEffect(FireworkEffect.builder().flicker(false)
				.trail(true)
				.with(Type.BALL_LARGE)
				.withColor(Color.YELLOW)
				.withFade(Color.GREEN)
				.build());	
		fm.setPower(3);
		//TODO Set fireworks and shoot it
			teleportPlayer(p);		
			p.playSound(loc, Sound.valueOf(Main.this.getConfig().getString("joining-sound")), 4F, 1F);
			Bukkit.getServer().broadcastMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix")) +
					ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("new-player")).replaceAll("%player", p.getDisplayName()));
			p.playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-spawn")), 100);
			
		}else{
			Bukkit.getServer().broadcastMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
					ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("joining-message")).replaceAll("%p", p.getDisplayName()));
			teleportPlayer(p);
			p.playSound(loc, Sound.valueOf(Main.this.getConfig().getString("joining-sound")), 4.0F, 1.0F);
			p.playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-spawn")), 100);
		}
	}
	@EventHandler 
	public void onQuit(PlayerQuitEvent e){
		Player p = e.getPlayer();
		Location loc = p.getLocation();
		p.playSound(loc, Sound.valueOf(Main.this.getConfig().getString("quiting-sound")), 4F, 1F);	
		Bukkit.getServer().broadcastMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
				ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("quiting-message")).replaceAll("%p", p.getDisplayName()));
		
	}
	@SuppressWarnings("deprecation")
	@EventHandler
	public void onRespawn(PlayerRespawnEvent e){
		Player p = e.getPlayer();
		Location loc = p.getLocation();
		teleportPlayer(p);
		p.playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-spawn")), 50);	
		}
	 
	private void ReloadConfig() {
		plugin.reloadConfig();
		plugin.saveConfig();
		//TODO Total of reloading configuration 
		
	}
	public void saveLocation(Location location) {
		// TODO Auto-generated method stub
		plugin.getConfig().set("X", location.getX());
		plugin.getConfig().set("Y", location.getY());
		plugin.getConfig().set("Z", location.getZ());
		
		plugin.getConfig().set("world", location.getWorld());
		
		plugin.getConfig().set("Yaw", Float.floatToIntBits(location.getYaw()));
        plugin.getConfig().set("Pitch", Float.floatToIntBits(location.getPitch()));
        
        plugin.saveConfig();
        
		
	} 
	private void teleportPlayer(Player p) {
		Boolean isSpawnLocation = LocationSpawn();
		
		if(!isSpawnLocation){
			p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
					ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("not-set-spawn")));
			Location loc = p.getLocation();
			p.teleport(loc);
			return;
		}
		 Double x = plugin.getConfig().getDouble("X");
	     Double y = plugin.getConfig().getDouble("Y");
	     Double z = plugin.getConfig().getDouble("Z");
	     
	     Integer yaw = plugin.getConfig().getInt("Yaw");
	     Integer pitch = plugin.getConfig().getInt("Pitch");
	   						     
	     World world = Bukkit.getWorld(plugin.getConfig().getString("world"));
	     
	     Location spawn = new Location(world, x, y, z);
	     
	     Float nYaw = Float.intBitsToFloat(yaw);
	     Float nPitch = Float.intBitsToFloat(pitch);
	     
	     spawn.setYaw(nYaw);
	     spawn.setPitch(nPitch);
	     
	     p.teleport(spawn);
	     						     
	}

	public Boolean LocationSpawn() {
		Boolean hasX = plugin.getConfig().isSet("X");
		Boolean hasY = plugin.getConfig().isSet("Y");
		Boolean hasZ = plugin.getConfig().isSet("Z");
		Boolean hasWorld = plugin.getConfig().isSet("world");
		
		Boolean hasYaw = plugin.getConfig().isSet("Yaw");
        Boolean hasPitch = plugin.getConfig().isSet("Pitch");
        
        if (hasX && hasY && hasZ && hasYaw && hasPitch && hasWorld) {
            return true;
        }
		return false;
	
		
	}
	}
